name: Ubuntu

on:
  push:
    branches-ignore: dev
  pull_request:
    branches-ignore: dev, v2

jobs:
  CI_Tests:
    permissions:
      actions: none
      checks: none
      contents: none
      deployments: none
      issues: none
      packages: none
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none
    strategy:
      fail-fast: false
      matrix:
        cpp_version: [ 17, 20 ]
        build_type: [ Debug, Release ]
        os: [ ubuntu-24.04 ]
        toolset: [ g++-12, g++-13, clang++-19, clang++-20 ]
        exclude:
          - toolset: g++-12
            cpp_version: 20
          - toolset: clang++-13
            cpp_version: 20
          - toolset: clang++-14
            cpp_version: 20
          - toolset: clang++-15
            cpp_version: 20
    runs-on: ${{ matrix.os }}
    name: "${{ matrix.os }} ${{ matrix.toolset }} ${{ matrix.cpp_version }} ${{ matrix.build_type }} ${{ matrix.except_type}}"
    steps:
      - uses: actions/checkout@v1
      - name: Setup APT and Base Dependencies(24.04)
        if: endsWith( matrix.os, '24.04' )
        run: |
          sudo wget -O /etc/apt/trusted.gpg.d/llvm.asc https://apt.llvm.org/llvm-snapshot.gpg.key
          sudo apt-add-repository 'deb http://apt.llvm.org/noble/ llvm-toolchain-noble main'
          sudo apt-add-repository 'deb http://apt.llvm.org/noble/ llvm-toolchain-noble-19 main'
          sudo apt-add-repository 'deb http://apt.llvm.org/noble/ llvm-toolchain-noble-20 main'
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt update
          sudo apt install ninja-build libunwind-dev
      - name: Get Clang Version
        if: startsWith( matrix.toolset, 'clang' )
        run: |
          echo "DAW_CLANG_VER=$(echo ${{matrix.toolset}} | cut -d- -f2)" >> $GITHUB_ENV
      - name: Get Clang Environment
        if: startsWith( matrix.toolset, 'clang' )
        run: |
          echo "CC=$(echo clang-${{ env.DAW_CLANG_VER }})" >> $GITHUB_ENV
          echo "CXX=$(echo clang++-${{ env.DAW_CLANG_VER }})" >> $GITHUB_ENV
          #echo "CXXFLAGS=${CXXFLASGS} -stdlib=libc++" >> $GITHUB_ENV
          echo "UBSAN_OPTIONS='halt_on_errors=1'" >> $GITHUB_ENV
      - name: Install Clang Environment
        if: startsWith( matrix.toolset, 'clang' )
        run: |
          sudo apt-get install --ignore-missing \
            ${{ env.CC }}
      - name: Get GCC version
        if: startsWith( matrix.toolset, 'g++' )
        run: |
          echo "DAW_GCC_VER=$(echo ${{matrix.toolset}} | cut -d- -f2)" >> $GITHUB_ENV
      - name: Set GCC Environment
        if: startsWith( matrix.toolset, 'g++' )
        run: |
          echo "CC=$(echo gcc-${{ env.DAW_GCC_VER }})" >> $GITHUB_ENV
          echo "CXX=$(echo g++-${{ env.DAW_GCC_VER }})" >> $GITHUB_ENV
      - name: Install GCC Environment
        if: startsWith( matrix.toolset, 'g++' )
        run: |
          sudo apt install ${{ env.CC }} ${{ env.CXX }}
      - name: Create Build
        run: |
          mkdir build
      - name: Build Dependencies
        run: cmake -GNinja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DDAW_ENABLE_TESTING=ON -DCMAKE_CXX_STANDARD=${{ matrix.cpp_version }} -Bbuild/ .
      - name: Build
        run: cmake --build build/ --target daw-header-libraries_full -- -k 0
        continue-on-error: true
      - name: Test
        run: |
          ctest -C ${{ matrix.build_type }} --build-target daw-header-libraries_full -j2 -VV --timeout 1200 --test-dir build/